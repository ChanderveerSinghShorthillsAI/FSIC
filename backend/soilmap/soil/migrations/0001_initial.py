# Generated by Django 5.2 on 2025-06-25 12:02

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BlockMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range', models.CharField(help_text='Range where block is located', max_length=100)),
                ('circle', models.CharField(help_text='Circle where block is located', max_length=100)),
                ('division', models.CharField(help_text='Division where block is located', max_length=100)),
                ('block_name', models.CharField(help_text='Name of the block', max_length=100)),
                ('legal_status', models.CharField(help_text='Category of block (Protected, Reserved, etc.)', max_length=50)),
                ('notify_area', models.FloatField(help_text='Area of block in hectares')),
            ],
        ),
        migrations.CreateModel(
            name='crop_price_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('crop', models.CharField(max_length=100)),
                ('market', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('price_inr_per_quintal', models.FloatField(help_text='Price (INR/quintal)')),
            ],
        ),
        migrations.CreateModel(
            name='crop_production_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('crop', models.CharField(max_length=100)),
                ('season', models.CharField(max_length=50)),
                ('area_hectares', models.FloatField(help_text='Area (hectares)')),
                ('yield_quintals', models.FloatField(help_text='Yield (quintals)')),
                ('production_metric_tons', models.FloatField(help_text='Production (metric tons)')),
            ],
        ),
        migrations.CreateModel(
            name='DigitalElevationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='GeoTIFF file (SRTM/ASTER DEM)', upload_to='digital_elevation/')),
                ('description', models.TextField(default='Avg. distance above sea level')),
                ('source', models.CharField(default='SRTM/ASTER', max_length=100)),
                ('year', models.IntegerField(default=2000, help_text='Year of data collection')),
                ('spatial_resolution', models.CharField(default='30m', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ForestAssessment2011_data_file_1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('geographical_area', models.FloatField(help_text='Geographical Area (sq km)')),
                ('very_dense_forest', models.FloatField(help_text='Very Dense Forest (2011 Assessment, sq km)')),
                ('mod_dense_forest', models.FloatField(help_text='Moderately Dense Forest (2011 Assessment, sq km)')),
                ('open_forest', models.FloatField(help_text='Open Forest (2011 Assessment, sq km)')),
                ('total_forest', models.FloatField(help_text='Total Forest (2011 Assessment, sq km)')),
                ('percent_of_ga', models.FloatField(help_text='Percent of Geographical Area')),
                ('change', models.FloatField(help_text='Change in forest area')),
                ('scrub', models.FloatField(help_text='Scrub area (sq km)')),
            ],
        ),
        migrations.CreateModel(
            name='ForestFireAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range', models.CharField(help_text='Range where forest fire was reported', max_length=100)),
                ('circle', models.CharField(help_text='Circle where forest fire was reported', max_length=100)),
                ('division', models.CharField(help_text='Division where forest fire was reported', max_length=100)),
                ('district', models.CharField(help_text='District where forest fire was reported', max_length=100)),
                ('lat_long', models.CharField(help_text='Latitude/Longitude of fire incident', max_length=50)),
                ('date_time', models.DateTimeField(help_text='Date and time when fire was reported')),
                ('status', models.CharField(help_text='Status of forest fire (Action Initiated, Pending, Closed)', max_length=50)),
                ('manpower_req', models.IntegerField(help_text='Total number of people required to curtail fire')),
                ('organization_req', models.CharField(help_text='Organization required to curtail fire', max_length=100)),
                ('affected_forest_area', models.FloatField(help_text='Area of forest affected by fire (hectares)')),
                ('wildlife_loss', models.JSONField(blank=True, help_text='Species wise loss incurred due to fire', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ForestFireData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(help_text='State where forest fire was reported', max_length=100)),
                ('circle', models.CharField(help_text='Circle where forest fire was reported', max_length=100)),
                ('district', models.CharField(help_text='District where forest fire was reported', max_length=100)),
                ('lat_long', models.CharField(help_text='Latitude/Longitude of fire incident', max_length=50)),
                ('date_time', models.DateTimeField(help_text='Date and time when fire was reported')),
                ('forest_block', models.CharField(help_text='Forest block name', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='GrasslandWaterBodiesData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='GeoTIFF for grassland & water bodies', upload_to='grassland_water_geotiff/')),
                ('description', models.TextField(default='Grassland and water bodies layer (LULC/NRSC)')),
                ('source', models.CharField(default='LULC, NRSC', max_length=100)),
                ('spatial_resolution', models.CharField(default='30m', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='GroundWaterDepth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField(help_text='Latitude of the location')),
                ('long', models.FloatField(help_text='Longitude of the location')),
                ('year', models.IntegerField(help_text='Year when measured')),
                ('pre_monsoon', models.FloatField(help_text='Ground water depth pre-monsoon (m)')),
                ('post_monsoon', models.FloatField(help_text='Ground water depth post-monsoon (m)')),
            ],
        ),
        migrations.CreateModel(
            name='HumanSettlementData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='GeoTIFF file for human settlements', upload_to='human_settlement_geotiff/')),
                ('description', models.TextField(default='Extent of human settlements (NRSC, satellite derived)')),
                ('source', models.CharField(default='NRSC', max_length=100)),
                ('start_year', models.IntegerField(default=2011)),
                ('spatial_resolution', models.CharField(default='30m', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='LivestockData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(help_text='District name', max_length=100)),
                ('livestock_type', models.CharField(help_text='Category of livestock (e.g., Cattle, Buffalo, etc.)', max_length=100)),
                ('livestock_count', models.IntegerField(help_text='Total count of livestock')),
            ],
        ),
        migrations.CreateModel(
            name='MasterProduce',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('produce_type', models.CharField(help_text='Broad category of forest produce', max_length=100)),
                ('base_produce_type', models.CharField(help_text='Sub-category of forest produce', max_length=100)),
                ('price', models.FloatField(help_text='Price in INR')),
            ],
        ),
        migrations.CreateModel(
            name='NoCIssuance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('circle', models.CharField(max_length=100)),
                ('division', models.CharField(max_length=100)),
                ('request_no', models.CharField(max_length=50, unique=True)),
                ('process_status', models.CharField(max_length=50)),
                ('land_shapefile', models.FileField(blank=True, null=True, upload_to='noc_kml/')),
                ('proposed_area', models.FloatField(blank=True, help_text='Area in hectares', null=True)),
                ('distance_water_source', models.FloatField(blank=True, help_text='Distance from water source (km)', null=True)),
                ('distance_forest_boundary', models.FloatField(blank=True, help_text='Distance from forest boundary (km)', null=True)),
                ('distance_protected_area', models.FloatField(blank=True, help_text='Distance from protected area (km)', null=True)),
                ('number_trees', models.FloatField(blank=True, help_text='Number of trees in proposed area', null=True)),
                ('forest_density', models.FloatField(blank=True, help_text='Forest area in proposed land (hectares)', null=True)),
                ('species_details', models.JSONField(blank=True, help_text='Count of each species in proposed land', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NurseryData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circle', models.CharField(help_text='Circle where nursery is located', max_length=100)),
                ('division', models.CharField(help_text='Division where nursery is located', max_length=100)),
                ('nursery_name', models.CharField(help_text='Name of the nursery', max_length=100)),
                ('plant_name', models.CharField(help_text='Name of the plant', max_length=100)),
                ('plant_age', models.FloatField(help_text='Age of the plant (years)')),
                ('plant_height', models.FloatField(help_text='Height of the plant (cm or appropriate unit)')),
                ('plant_price', models.FloatField(help_text='Price per unit (INR)')),
                ('total_stock', models.IntegerField(help_text='Total quantity in nursery')),
                ('online_purchase', models.IntegerField(help_text='Total online purchases')),
            ],
        ),
        migrations.CreateModel(
            name='OffenceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range', models.CharField(help_text='Range where the offence was reported', max_length=100)),
                ('circle', models.CharField(help_text='Circle where the offence was reported', max_length=100)),
                ('division', models.CharField(help_text='Division where the offence was reported', max_length=100)),
                ('offence_type', models.CharField(help_text='Type of offence (e.g. Wood Cutting, Hunting)', max_length=100)),
                ('fir_date', models.DateField(help_text='Date when FIR was filed')),
                ('items_seized', models.JSONField(blank=True, help_text='Name and quantity of items seized', null=True)),
                ('compounded_amount', models.FloatField(blank=True, help_text='Amount collected as compensation (₹)', null=True)),
                ('rule_applied', models.CharField(help_text='Type of rule enforced (WPA 1972/FA 1953)', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PlantationSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_shapefile', models.FileField(blank=True, help_text='Shapefile (KML) of plantation site', null=True, upload_to='plantation_sites/')),
                ('circle', models.CharField(help_text='Circle where plantation site is present', max_length=100)),
                ('division', models.CharField(help_text='Division where plantation site is present', max_length=100)),
                ('range', models.CharField(help_text='Range where plantation site is present', max_length=100)),
                ('village', models.CharField(help_text='Village where plantation site is present', max_length=100)),
                ('scheme', models.CharField(help_text='Scheme under which plantation was undertaken (e.g. CAMPA, FDA)', max_length=100)),
                ('plantation_year', models.DateField(help_text='Year when plantation was undertaken')),
            ],
        ),
        migrations.CreateModel(
            name='ProduceAuction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circle', models.CharField(help_text='Circle where auction was conducted', max_length=100)),
                ('division', models.CharField(help_text='Division where auction was conducted', max_length=100)),
                ('range', models.CharField(help_text='Range where auction was conducted', max_length=100)),
                ('depot', models.CharField(help_text='Depot where auction was conducted', max_length=100)),
                ('int_no', models.CharField(help_text='Unique ID for forest produce being auctioned', max_length=50)),
                ('product_type', models.CharField(help_text='Product type being auctioned', max_length=100)),
                ('product_unit', models.CharField(help_text='Unit of measure for forest produce', max_length=50)),
                ('product_quantity', models.FloatField(help_text='Total quantity of product being auctioned')),
                ('bidding_amount', models.FloatField(help_text='Amount bid for the forest produce in INR')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectMonthlyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circle', models.CharField(help_text='Circle where project is present', max_length=100)),
                ('division', models.CharField(help_text='Division where project is present', max_length=100)),
                ('range', models.CharField(help_text='Range where project site is present', max_length=100)),
                ('site', models.CharField(help_text='Plantation site name', max_length=100)),
                ('scheme', models.CharField(help_text='Scheme under which plantation was undertaken (e.g. CAMPA, FDA)', max_length=100)),
                ('physical_target', models.FloatField(help_text='Target forest area to be covered under project (hectares)')),
                ('physical_achieved', models.FloatField(help_text='Achieved forest area cover under project (hectares)')),
                ('budget_utilization', models.FloatField(help_text='Ratio of budget utilized to allocated')),
                ('man_days_generated', models.IntegerField(help_text='Number of man-days generated via the project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectShapefile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circle', models.CharField(help_text='Circle where project is present', max_length=100)),
                ('division', models.CharField(help_text='Division where project is present', max_length=100)),
                ('range', models.CharField(help_text='Range where project is present', max_length=100)),
                ('block', models.CharField(help_text='Block where project is present', max_length=100)),
                ('lat_long', models.CharField(help_text='Latitude/Longitude of project', max_length=50)),
                ('project_shapefile', models.FileField(blank=True, help_text='KML/Shapefile of the project', null=True, upload_to='project_shapefiles/')),
            ],
        ),
        migrations.CreateModel(
            name='RainfallDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='NetCDF file for rainfall data', upload_to='rainfall_netcdf/')),
                ('description', models.TextField(default='Depth of rainfall (in mm)')),
                ('source', models.CharField(default='India Meteorological Department (IMD)', max_length=100)),
                ('start_date', models.DateField(help_text='Start date of data availability')),
                ('end_date', models.DateField(help_text='End date of data availability')),
                ('spatial_resolution', models.CharField(default='0.25x0.25 degrees', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='rajasthan_city_climate_split',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100)),
                ('climate_zone', models.CharField(max_length=10)),
                ('avg_temp_c', models.FloatField(help_text='Average Temperature (°C)')),
                ('avg_temp_f', models.FloatField(help_text='Average Temperature (°F)')),
                ('precipitation_mm', models.FloatField(help_text='Precipitation (mm)')),
                ('precipitation_in', models.FloatField(help_text='Precipitation (inches)')),
            ],
        ),
        migrations.CreateModel(
            name='rajasthan_district_forest_stat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('geo_area_sqkm', models.FloatField(help_text='Geographical Area (sq km)')),
                ('forest_area_sqkm', models.FloatField(help_text='Forest Area (sq km)')),
                ('percent_forest_geo', models.FloatField(help_text='% Forest Area w.r.t. Geo Area')),
                ('population_2001', models.BigIntegerField()),
                ('per_capita_forest_area_ha', models.FloatField(help_text='Per Capita Forest Area (Ha)')),
            ],
        ),
        migrations.CreateModel(
            name='rajasthan_groundwater_wells',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district_name', models.CharField(max_length=100)),
                ('no_of_well_analysed', models.IntegerField()),
                ('no_0_2m', models.IntegerField()),
                ('perc_0_2m', models.FloatField()),
                ('no_2_5m', models.IntegerField()),
                ('perc_2_5m', models.FloatField()),
                ('no_5_10m', models.IntegerField()),
                ('perc_5_10m', models.FloatField()),
                ('no_10_20m', models.IntegerField()),
                ('perc_10_20m', models.FloatField()),
                ('no_20_40m', models.IntegerField()),
                ('perc_20_40m', models.FloatField()),
                ('no_above_40m', models.IntegerField()),
                ('perc_above_40m', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='rajasthan_rainfall_distribution_june2025',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('actual_mm_this_week', models.FloatField()),
                ('normal_mm_this_week', models.FloatField()),
                ('percent_departure_this_week', models.FloatField()),
                ('category_this_week', models.CharField(max_length=10)),
                ('actual_mm_1jun_8jun', models.FloatField()),
                ('normal_mm_1jun_8jun', models.FloatField()),
                ('percent_departure_1jun_8jun', models.FloatField()),
                ('category_1jun_8jun', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='rajasthan_ravine_area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('estimated_area_ha', models.FloatField(help_text='Estimated Area in Hectares')),
            ],
        ),
        migrations.CreateModel(
            name='rajasthan_river_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('river_name', models.CharField(max_length=100)),
                ('area_in_ha', models.FloatField(help_text='Area in Hectares')),
                ('district', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='soil_analysis_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('soil_type', models.CharField(max_length=100)),
                ('ph_level', models.FloatField()),
                ('organic_matter', models.FloatField(help_text='Percentage (%)')),
                ('nitrogen_content', models.FloatField(help_text='kg/ha')),
                ('phosphorus_content', models.FloatField(help_text='kg/ha')),
                ('potassium_content', models.FloatField(help_text='kg/ha')),
            ],
        ),
        migrations.CreateModel(
            name='SoilMoistureDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='GeoTIFF file for soil moisture', upload_to='soil_moisture_geotiff/')),
                ('description', models.TextField(default='Top 0-5cm soil moisture (NASA SMAP)')),
                ('source', models.CharField(default='NASA, SMAP', max_length=100)),
                ('start_date', models.DateField(help_text='Start date of data availability')),
                ('end_date', models.DateField(help_text='End date of data availability')),
                ('spatial_resolution', models.CharField(default='27.5km', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='SpeciesCarbonSequestration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the species', max_length=100)),
                ('scientific_name', models.CharField(help_text='Scientific name of the species', max_length=150)),
                ('volume_equation_type', models.CharField(help_text='Type of equation used to estimate tree volume', max_length=100)),
                ('volume_equation_coefficients', models.CharField(help_text='Coefficients used in the volume equation', max_length=200)),
                ('wood_density', models.CharField(help_text='Air-dry wood density in g/cm³', max_length=50)),
                ('biomass_expansion_factor', models.FloatField(help_text='Factor to convert stem biomass to total above-ground biomass')),
                ('carbon_fraction', models.FloatField(help_text='Fraction of biomass that is carbon')),
                ('co2_conversion_factor', models.FloatField(help_text='Factor to convert carbon to CO2')),
                ('diameter_growth', models.FloatField(help_text='Mapping of tree age (years) to estimated diameter (cm)')),
                ('root_shoot_ratio', models.FloatField(help_text='Ratio of below-ground to above-ground biomass')),
                ('stem_leaf_biomass_factor', models.FloatField(help_text='Factor for estimating stem-to-leaf biomass ratio')),
            ],
        ),
        migrations.CreateModel(
            name='TemperatureData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='NetCDF file for temperature data', upload_to='temperature_netcdf/')),
                ('description', models.TextField(default='Long term average temperature')),
                ('source', models.CharField(default='India Meteorological Department (IMD)', max_length=100)),
                ('start_year', models.IntegerField(default=2000)),
                ('end_year', models.IntegerField(blank=True, null=True)),
                ('spatial_resolution', models.CharField(default='1x1 degree', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='water_usage_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100)),
                ('crop', models.CharField(max_length=100)),
                ('irrigation_method', models.CharField(max_length=100)),
                ('water_consumption', models.FloatField(help_text='liters per hectare')),
                ('water_availability', models.FloatField(help_text='liters per hectare')),
            ],
        ),
    ]
